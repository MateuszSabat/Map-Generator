#pragma kernel CSGenerateField

// gradient
RWStructuredBuffer<float2> gradient;

int gradientSize;

uint gradientIndex(uint x, uint y) {
	return (x % gradientSize) * gradientSize + (y % gradientSize);
}

//field

uint size;
float scale;

uint octaves;
float lacunarity;
float persistance;
RWStructuredBuffer<float2> offset;


RWStructuredBuffer<float> field;

uint index(uint x, uint y) {
	return x * size + y;
}

float dotGradient(float2 v, uint x, uint y) {
	float2 v1 = v - float2(x, y);
	int i = gradientIndex(x, y);
	return dot(v1, gradient[i]) * 0.5f + 0.5f;
}

float cerp(float a, float b, float t) { 
	float d = a - b;
	return t * t * d * (2 * t - 3) + a;
}

float noise(float2 v) {

	uint x = int(v.x);
	uint y = int(v.y);

	float tx = v.x - (float)x;
	float ty = v.y - (float)y;

	float s1 = dotGradient(v, x, y);
	float s2 = dotGradient(v, x + 1, y);
	float n1 = cerp(s1, s2, tx);

	s1 = dotGradient(v, x, y + 1);
	s2 = dotGradient(v, x + 1, y + 1);
	float n2 = cerp(s1, s2, tx);
	return cerp(n1, n2, ty);
}


[numthreads(8,8,1)]
void CSGenerateField(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= size || id.y >= size)
		return;

	float2 v = float2(id.xy) * scale;
	int i = index(id.x, id.y);

	float amplitude = 1;
	float frequency = 1;

	float value = 0;

	float maxHeight = 0;

	for (uint j = 0; j < octaves; j++) {
		value += amplitude * noise((v + offset[j]) / frequency);
		maxHeight += amplitude;

		amplitude *= persistance;
		frequency *= lacunarity;
	}

	value /= maxHeight;

	field[i] = value;
}
